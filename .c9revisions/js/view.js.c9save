{"ts":1348017178523,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"ts":1348017356647,"patch":[[{"diffs":[[0,"ion("],[-1,"arg1, agr2"],[0,") {\n"]],"start1":37,"start2":37,"length1":18,"length2":8},{"diffs":[[0,";\n};"],[-1,"\n\nvar view = new VIEW.Meeting1();"]],"start1":626,"start2":626,"length1":37,"length2":4}]],"length":630,"saved":false}
{"ts":1348017382679,"patch":[[{"diffs":[[0,".Meeting"],[-1,"1"],[1,"View"],[0," = funct"]],"start1":20,"start2":20,"length1":17,"length2":20}]],"length":633,"saved":false}
{"contributors":[],"silentsave":false,"ts":1348017738312,"patch":[[{"diffs":[[1,"var VIEW = {};\n\nVIEW.Meeting1 = function(arg1, ) {\n    // ---- PRIVATE VARS ---- //\n\t//used so that private methods have access to public methods/properties\n\tvar self = this;\n\t//var myprivateVar = 10;\n\n\t// ---- PUBLIC VARS ---- //\n\t//this.myPublicVar = 10;\n\n\t// ---- CONSTRUCTOR ---- //\n\t//Put your constructor code here\n\n\t// ---- PRIVATE FUNCTIONS ---- //\n\t//NOTE: If you want access to a public method/property reference it through the self property.\n\t//\tEx: self.myPublicVar = 10;\n\t// function myPrivateFunc(){\n\t\t//do something\n\t// };\n\n\t// ---- PUBLIC FUNCTIONS ---- //\n\t// this.myPublicFunc = function (){\n\t\t//do something\n\t// };\n};\n\nBackbone.Model.extend({\n    init:function() {\n        console.log(\"do stuff\");\n    }\n})"]],"start1":0,"start2":0,"length1":0,"length2":725}]],"length":725,"saved":false}
{"contributors":[],"silentsave":false,"ts":1348018030872,"patch":[[{"diffs":[[0,"arg1"],[-1,", "],[0,") {\n"]],"start1":41,"start2":41,"length1":10,"length2":8},{"diffs":[[0,";\n};"],[-1,"\n\nBackbone.Model.extend({\n    init:function() {\n        console.log(\"do stuff\");\n    }\n})"]],"start1":630,"start2":630,"length1":93,"length2":4}]],"length":634,"saved":false}
